{"componentChunkName":"component---src-templates-markdown-page-template-tsx","path":"/documentation/reporting-framework/quality-rules/","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"fields":{"slug":"/documentation/","category":"documentation"},"frontmatter":{"title":"Overview"}}},{"node":{"fields":{"slug":"/discover/markdown-cheatsheet/","category":"discover"},"frontmatter":{"title":"Markdown cheatsheet"}}},{"node":{"fields":{"slug":"/documentation/analytical-toolbox/laying-out-your-power-bi-report/","category":"documentation"},"frontmatter":{"title":"Laying out your Power BI report"}}},{"node":{"fields":{"slug":"/documentation/analytical-toolbox/power-bi-themes-templates-and-components/","category":"documentation"},"frontmatter":{"title":"Power BI Themes / Templates / Components"}}},{"node":{"fields":{"slug":"/documentation/reporting-framework/quality-rules/","category":"documentation"},"frontmatter":{"title":"Quality Rules"}}}]},"article":{"htmlAst":{"type":"root","children":[{"type":"element","tagName":"h1","properties":{},"children":[{"type":"text","value":"Data Structure Guidelines"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"It is very import for a Python developer to know which data structure to use and when. In this section we are going to give a quick introduction to the most popular data structures in Python and hashable vs unhashable objects as well as the numpy and pandas libraries."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Do note that because Python is not a strong typed language, data structures can contain multiple different types of objects in them."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Mutable vs Immutable and Hashable vs Unhashable"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"In Python, data structures and objects can either be mutable or immutable and they can be hashable or unhashable."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"This is very important since mutable and immutable refer to the ability to modify a given object or not. This property then impacts if an object is hashable or not."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Hashing is the generation of an integer identifier for an object which will never change during the objects lifetime. Typically, immutable objects are hashable while mutable objects are not."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"List"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"A list in Python is a mutable unhashable ordered collection of objects."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Usage Example:"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-python"]},"children":[{"type":"text","value":"list_sample_1 = [] # empty list\n\nlist_sample_1.append(1) # adds 1 to the end of the list\n\nlist_sample_1.append('a') # adds 'a' to the end of the list\n\nprint(list_sample_1) # [1, 'a']\n\nlist_sample_1[0] = 2\n\nprint(list_sample_1) # [2, 'a']\n"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Lists are good when you want to store a collection of items that can have duplicates and that you would want to order."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-python"]},"children":[{"type":"text","value":"list_sample_1 = [4,5,3,2,5,1,3]\n\nprint(sorted(list_sample_1)) # [1, 2, 3, 3, 4, 5, 5]\n"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Tuple"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"A tuple in Python is an immutable hashable ordered collection of objects. Although, mutable objects within a tuple can be modified."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Usage Example:"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Usage Example:"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-python"]},"children":[{"type":"text","value":"tuple_sample_1 = () # empty tuple, can't be changed\n\ntuple_sample_2 = (1,2,3) # integer tuple\n\ntuple_sample_3 = ([1,2,3],'[4,5,6]', 2) # mixed types tuple\n\ntuple_sample_4 = (3,4,5,2,3)\n\nprint(sorted(tuple_sample_4)) # (2, 3, 3, 4, 5)\n\ntuple_sample_3[0] = 1 # TypeError: 'tuple' object does not support item assignment\n"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"You would use a tuple only if working with a collection you don't want to alter whether in terms of size or content, it doesn't have an "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"append"}]},{"type":"text","value":" function like "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"List"}]},{"type":"text","value":" does, and does not support changing values inside of it."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Set"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"A set in Python is a mutable unhashable non-ordered collection of unique objects that don't have an index."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Usage Example:"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-python"]},"children":[{"type":"text","value":"set_sample_1 = set() # empty set - pay attention because if you write this: set_sample_1 = {} it considers it as a dictionary\n\nset_sample_1.add(1) # {1}\n\nset_sample_1.add(1) # {1}\n\nset_sample_1.add('a') # {1, 'a'}\n\nset_sample_1.pop() # this will remove the last element in the set\n\nset_sample_1[0] = 2 # TypeError: 'set' object is not subscriptable - you cannot access an element in a set as you would access an element in a list\n\nset_sample_1.remove(1) # {'a'} - removes the element provided as a parameter\n"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"A handy way of using a set is to get all unique members of a list."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-python"]},"children":[{"type":"text","value":"list_sample_1 = [1,2,3,4,4,5,6,3,2,1]\n\nunique_set = set(list_sample_1) # {1, 2, 3, 4, 5, 6} - you can then turn this back to a list if you so wish to: list(unique_set)\n"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"As you can see in the prior examples, you would use a set when you want to have a collection of unique objects. It is pseudo-mutable because you can remove / add objects to it but you cannot change the values of the objects that are in it."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Dictionary"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"A dictionary in Python is a mutable unhashable ordered (if Python version is 3.7 or higher) collection of hashable unique keys and their unique values."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Usage Example:"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-python"]},"children":[{"type":"text","value":"dict_sample_1 = {} # empty dictionary\n\ndict_sample_1[1] = 1 # {1: 1}\n\ndict_sample_1[(1,2,'c')] = ['a',2,3] # {1: 1, (1, 2, 'c'): ['a', 2, 3]}\n\ndict_sample_1[1] = 2 # {1:2, (1, 2, 'c'): ['a', 2, 3]}\n\ndict_sample_1[[1,2,'c']] = 2 # TypeError: unhashable type: 'list'\n"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Dictionaries are very useful in representing complex data, you can also use nested dictionaries if more complexity is needed i.e.:"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-python"]},"children":[{"type":"text","value":"dict_sample_1 = {1: {1: {'username':'test', 'pwd': 'secret', 'active': True}}}\n"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"It is very similar to "},{"type":"element","tagName":"a","properties":{"href":"https://www.w3schools.com/whatis/whatis_json.asp"},"children":[{"type":"text","value":"JSON syntax"}]},{"type":"text","value":" and can contain customized objects, tuples etc. which is not supported by JSON."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h1","properties":{},"children":[{"type":"text","value":"Asynchronous Programming"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Code tends to be written to run synchronously:"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Get a document => Extract information from it => Transform it to a model input."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"In some cases, when an action does not need the previous actions' to finish to execute, we can introduce "},{"type":"element","tagName":"a","properties":{"href":"https://www.outsystems.com/blog/posts/asynchronous-vs-synchronous-programming/"},"children":[{"type":"text","value":"asynchronous"}]},{"type":"text","value":" code."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"As an example, think of a user interface where a user can upload documents to be processed and returned back to the user."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"In syncronous programming, this user interface would follow a simple workflow:\nWait for user input => Process document => Return document."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"But this would be ineffective since the user interface does not need to wait for the document to finish processing to continue to execute."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"In asyncronous programming, the user interface process can run the document processing method as an async method allowing the user interface to continue to execute."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Wait for user input => async process document...\nWaiting for further input | async document processing...\nWaiting for further input => 2nd async process document | async document processing...\nwaiting for further input | async document processed! | async document 2 processing...\netc..."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Asynchronicity in Python is a bit different than in other programming languages. It can be achieved through different ways, all of which presented in "},{"type":"element","tagName":"a","properties":{"href":"https://medium.com/velotio-perspectives/an-introduction-to-asynchronous-programming-in-python-af0189a88bbb"},"children":[{"type":"text","value":"this article"}]},{"type":"text","value":" and some of them described below."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"./async-py.png","alt":"Python Programming Models","title":"Python Programming Models"},"children":[]}]}],"data":{"quirksMode":false}},"fields":{"slug":"/documentation/reporting-framework/quality-rules/","category":"documentation"},"frontmatter":{"last_updated":"July 21, 2022","title":"Quality Rules","description":"It is very import for a Python developer to know which data structure to use and when. In this section we are going to give a quick introduction to the most popular data structures in Python and hashable vs unhashable objects as well as the numpy and pandas libraries."}}},"pageContext":{"id":"9154512b-d7a0-5a1d-a6f7-d43db6d0eca9"}},"staticQueryHashes":[]}